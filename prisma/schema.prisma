// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init 

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    email String? @unique
    phone String?
    name String?
    verified DateTime?
    image String?
    password String?
    dateOfBirth DateTime?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    emailVerified DateTime?

    accounts Account[]
    listings Listing[]
    reservations Reservation[]
    wishlists Wishlist[]
}

model Account {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.String
    access_token String? @db.String
    accessTokenExpires DateTime?
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.String
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Listing {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    description String
    imageSrc String
    created_at DateTime @default(now())
    category String
    roomCount Int
    bathRoomCount Int
    location String
    userId String @db.ObjectId
    price Int

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    reservations Reservation[]
    wishlists Wishlist[]
}

model Reservation {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    listingId String @db.ObjectId
    startDate DateTime
    endDate DateTime
    totalPrice Int
    createdAt DateTime @default(now())
    updatedAt DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
    status String
}

model Wishlist {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    listingId String @db.ObjectId

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}